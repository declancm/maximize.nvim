*maximize.nvim.txt*        For Neovim >= 0.8.0        Last change: 2024 May 25

==============================================================================
Table of Contents                            *maximize.nvim-table-of-contents*

1. maximize.nvim                                 |maximize.nvim-maximize.nvim|
  - Features                            |maximize.nvim-maximize.nvim-features|
  - Requirements                    |maximize.nvim-maximize.nvim-requirements|
  - Installation                    |maximize.nvim-maximize.nvim-installation|
  - Usage                                  |maximize.nvim-maximize.nvim-usage|
  - Configuration                  |maximize.nvim-maximize.nvim-configuration|
  - User Events                      |maximize.nvim-maximize.nvim-user-events|
  - statusline & winbar      |maximize.nvim-maximize.nvim-statusline-&-winbar|

==============================================================================
1. maximize.nvim                                 *maximize.nvim-maximize.nvim*

Maximize Neovim windows.


FEATURES                                *maximize.nvim-maximize.nvim-features*

- Toggle maximizing the current window without any ugly borders.
- Has builtin integration for the following plugins:
    - aerial.nvim
    - nvim-dap-ui
    - nvim-tree.lua


REQUIREMENTS                        *maximize.nvim-maximize.nvim-requirements*

- Neovim >= 0.8.0 (use a tagged version for older Neovim versions)


INSTALLATION                        *maximize.nvim-maximize.nvim-installation*

Install with your favourite plugin manager and run the setup function.


PACKER ~

>lua
    use {
      'declancm/maximize.nvim',
      config = function() require('maximize').setup() end
    }
<


LAZY ~

>lua
    use {
      'declancm/maximize.nvim',
      config = true
    }
<


USAGE                                      *maximize.nvim-maximize.nvim-usage*


VIM COMMANDS ~

- Toggle maximizing the current window:
    `:Maximize`


LUA API ~

- Toggle maximizing the current window:
    `require('maximize').toggle()`
- Maximize the current window:
    `require('maximize').maximize()`
- Restore windows:
    `require('maximize').restore()`


CONFIGURATION                      *maximize.nvim-maximize.nvim-configuration*

A settings table can be passed into the setup function for custom options.


DEFAULT OPTIONS ~

>lua
    {
      plugins = {
        aerial = { enable = true }, -- enable aerial.nvim integration
        dapui = { enable = true },  -- enable nvim-dap-ui integration
        tree = { enable = true },   -- enable nvim-tree.lua integration
      }
    }
<


USER EVENTS                          *maximize.nvim-maximize.nvim-user-events*

The following user events are triggered:

- **WindowMaximizeStart**before maximizing
- **WindowRestoreEnd**after restoring


STATUSLINE & WINBAR          *maximize.nvim-maximize.nvim-statusline-&-winbar*

Use the variable `vim.t.maximized` to check whether the tab has a maximized
window.


LUALINE ~

>lua
    local function maximize_status()
      return vim.t.maximized and '   ' or ''
    end
    
    require('lualine').setup {
      sections = {
        lualine_c = { maximize_status }
      }
    }
<


WINBAR ~

>lua
    -- ~/.config/nvim/lua/winbar.lua
    local M = {}
    
    M.maximize_status = function()
      return vim.t.maximized and '   ' or ''
    end
    
    return M
    
    -- ~/.config/nvim/init.lua
    vim.o.winbar = "%{%v:lua.require('winbar').maximize_status()%}"
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
